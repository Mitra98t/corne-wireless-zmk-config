/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    macros {
        delta: delta {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BSLH &kp D &kp E &kp L &kp T &kp A>;
            label = "DELTA";
        };

        Delta: Delta {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BSLH &kp LS(D) &kp E &kp L &kp T &kp A>;
            label = "DELTA";
        };

        Lambda: Lambda {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BSLH &kp LS(L) &kp A &kp M &kp B &kp D &kp A>;
            label = "LAMBDA";
        };

        lambda: lambda {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BSLH &kp L &kp A &kp M &kp B &kp D &kp A>;
            label = "LAMBDA";
        };

        RightArrow: RightArrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BSLH &kp LS(R) &kp I &kp G &kp H &kp T &kp A &kp R &kp R &kp O &kp W>;
            label = "RIGHTARROW";
        };

        iff: iff {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BSLH &kp I &kp F &kp F>;
            label = "IFF";
        };

        subset: subset {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BSLH &kp S &kp U &kp B &kp S &kp E &kp T>;
            label = "SUBSET";
        };

        subseteq: subseteq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BSLH &kp S &kp U &kp B &kp S &kp E &kp T &kp E &kp Q>;
            label = "SUBSETEQ";
        };
    };

    behaviors {
        d_Delta: d_Delta {
            compatible = "zmk,behavior-mod-morph";
            label = "D_DELTA";
            bindings = <&delta>, <&Delta>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        l_Lambda: l_Lambda {
            compatible = "zmk,behavior-mod-morph";
            label = "L_LAMBDA";
            bindings = <&lambda>, <&Lambda>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        implication: implication {
            compatible = "zmk,behavior-mod-morph";
            label = "IMPLICATION";
            bindings = <&RightArrow>, <&iff>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        subset_eq: subset_eq {
            compatible = "zmk,behavior-mod-morph";
            label = "SUBSET_EQ";
            bindings = <&subset>, <&subseteq>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            label = "Base";
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E           &kp R     &kp T          &kp Y        &kp U      &kp I           &kp O    &none     &kp BACKSPACE
&kp LEFT_CONTROL  &kp A  &kp S  &kp D           &kp F     &kp G          &kp H        &kp J      &kp K           &kp L    &kp P     &kp SEMI
&kp LEFT_ALT      &kp Z  &kp X  &kp C           &kp V     &kp B          &kp N        &kp M      &kp COMMA       &kp DOT  &kp FSLH  &kp ESC
                                &kp LEFT_SHIFT  &kp LCMD  &lt 1 SPACE    &lt 2 ENTER  &kp GRAVE  &kp APOSTROPHE
            >;
        };

        numbers {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp EQUAL  &kp NUMBER_7    &kp NUMBER_8  &kp NUMBER_9  &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp PLUS   &kp NUMBER_4    &kp N5        &kp NUMBER_6  &kp STAR   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp MINUS  &kp NUMBER_1    &kp NUMBER_2  &kp NUMBER_3  &kp SLASH  &trans
                        &trans  &trans  &trans    &trans     &kp LEFT_SHIFT  &kp NUMBER_0
            >;
        };

        symbols {
            bindings = <
&trans  &kp AT     &kp CARET  &kp MINUS       &kp PLUS          &kp STAR                &kp SLASH              &kp BACKSLASH      &kp HASH         &kp PERCENT        &trans        &trans
&trans  &kp COLON  &kp UNDER  &kp LESS_THAN   &kp GT            &kp PIPE                &kp AMPERSAND          &kp EXCL           &kp EQUAL        &kp DOLLAR         &kp SEMI      &kp TILDE
&trans  &kp GRAVE  &kp APOS   &kp LEFT_BRACE  &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp DOUBLE_QUOTES  &kp QUESTION  &trans
                              &trans          &trans            &trans                  &trans                 &trans             &trans
            >;
        };

        media {
            bindings = <
&bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &kp C_AC_DESKTOP_SHOW_ALL_APPLICATIONS  &trans            &trans
&trans        &trans        &trans        &trans        &trans        &trans          &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp UP_ARROW                       &kp C_PREVIOUS                          &kp C_PLAY_PAUSE  &kp C_NEXT
&out OUT_TOG  &trans        &trans        &trans        &trans        &trans          &kp K_MUTE            &kp LEFT              &kp DOWN                           &kp RIGHT                               &kp LEFT_ALT      &trans
                                          &trans        &trans        &trans          &trans                &trans                &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        test {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
